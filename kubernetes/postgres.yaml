# PostgreSQL deployment for File Connector in Kubernetes
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: file-connector
  labels:
    app: file-connector
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: file-connector
      component: database
  template:
    metadata:
      labels:
        app: file-connector
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "connector_db"
        - name: POSTGRES_USER
          value: "connector"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - connector
            - -d
            - connector_db
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - connector
            - -d
            - connector_db
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: file-connector
  labels:
    app: file-connector
    component: database
spec:
  selector:
    app: file-connector
    component: database
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: file-connector
  labels:
    app: file-connector
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: file-connector
  labels:
    app: file-connector
    component: database
type: Opaque
data:
  # Base64 encoded password: echo -n "connector123" | base64
  password: Y29ubmVjdG9yMTIz

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: file-connector
  labels:
    app: file-connector
    component: database
data:
  init-db.sql: |
    -- Database initialization script for File Connector
    -- This script sets up the initial database schema and configuration

    -- Create extensions if they don't exist
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

    -- Create database user if not exists (for additional permissions)
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'connector_app') THEN
            CREATE ROLE connector_app WITH LOGIN PASSWORD 'connector_app_pass';
        END IF;
    END
    $$;

    -- Grant permissions
    GRANT CONNECT ON DATABASE connector_db TO connector_app;
    GRANT USAGE ON SCHEMA public TO connector_app;
    GRANT CREATE ON SCHEMA public TO connector_app;

    -- Create a function for updating updated_at timestamps
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    -- Insert initial configuration data
    INSERT INTO pg_stat_statements_info (dealloc) VALUES (0) ON CONFLICT DO NOTHING;

    -- Create a health check function
    CREATE OR REPLACE FUNCTION health_check()
    RETURNS TEXT AS $$
    BEGIN
        RETURN 'Database is healthy at ' || CURRENT_TIMESTAMP;
    END;
    $$ LANGUAGE plpgsql;
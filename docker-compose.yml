# Docker Compose configuration for File Connector
version: '3.8'

services:
  # Main connector application
  connector:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: production
    container_name: file-connector
    restart: unless-stopped
    environment:
      # Application configuration
      - CONNECTOR_ENVIRONMENT=production
      - CONNECTOR_LOG_LEVEL=INFO
      - CONNECTOR_MAX_CONCURRENT_SYNCS=10
      
      # Database configuration
      - CONNECTOR_DATABASE_URL=postgresql://connector:${DB_PASSWORD:-connector123}@postgres:5432/connector_db
      
      # Google Drive configuration (set via environment)
      - CONNECTOR_GOOGLE_DRIVE_CREDENTIALS_PATH=/app/credentials/google-service-account.json
      
      # Autodesk configuration (set via environment)
      - CONNECTOR_AUTODESK_CLIENT_ID=${AUTODESK_CLIENT_ID}
      - CONNECTOR_AUTODESK_CLIENT_SECRET=${AUTODESK_CLIENT_SECRET}
      - CONNECTOR_AUTODESK_BASE_URL=https://developer.api.autodesk.com
      
      # Supabase configuration (set via environment)
      - CONNECTOR_SUPABASE_URL=${SUPABASE_URL}
      - CONNECTOR_SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    
    volumes:
      # Mount credentials directory
      - ./credentials:/app/credentials:ro
      
      # Mount configuration files
      - ./config:/app/config:ro
      
      # Mount logs directory
      - connector_logs:/app/logs
      
      # Mount data directory for SQLite (if used)
      - connector_data:/app/data
    
    ports:
      - "8080:8080"
    
    depends_on:
      postgres:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - connector_network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: connector-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=connector_db
      - POSTGRES_USER=connector
      - POSTGRES_PASSWORD=${DB_PASSWORD:-connector123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    ports:
      - "5432:5432"
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U connector -d connector_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    networks:
      - connector_network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Redis for caching and job queuing (optional)
  redis:
    image: redis:7-alpine
    container_name: connector-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    
    volumes:
      - redis_data:/data
    
    ports:
      - "6379:6379"
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    networks:
      - connector_network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: connector-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    ports:
      - "9090:9090"
    
    networks:
      - connector_network
    
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: connector-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    ports:
      - "3000:3000"
    
    depends_on:
      - prometheus
    
    networks:
      - connector_network
    
    profiles:
      - monitoring

# Named volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  connector_logs:
    driver: local
  connector_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  connector_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
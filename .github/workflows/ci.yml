# CI/CD Pipeline for File Connector
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black mypy bandit safety
    
    - name: Run Black formatting check
      run: black --check --diff src/ tests/
    
    - name: Run Flake8 linting
      run: flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Run MyPy type checking
      run: mypy src/ --ignore-missing-imports --disallow-untyped-defs
    
    - name: Run Bandit security linting
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
    
    - name: Check dependencies for security vulnerabilities
      run: safety check --json --output safety-report.json || true
    
    - name: Upload Safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_connector
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock coverage
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        CONNECTOR_ENVIRONMENT=testing
        CONNECTOR_LOG_LEVEL=DEBUG
        CONNECTOR_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_connector
        CONNECTOR_REDIS_URL=redis://localhost:6379
        CONNECTOR_GOOGLE_DRIVE_CREDENTIALS_PATH=./tests/fixtures/mock_credentials.json
        CONNECTOR_AUTODESK_CLIENT_ID=test_client_id
        CONNECTOR_AUTODESK_CLIENT_SECRET=test_client_secret
        CONNECTOR_SUPABASE_URL=http://localhost:54321
        CONNECTOR_SUPABASE_SERVICE_ROLE_KEY=test_service_role_key
        EOF
    
    - name: Create mock credentials
      run: |
        mkdir -p tests/fixtures
        cat > tests/fixtures/mock_credentials.json << EOF
        {
          "type": "service_account",
          "project_id": "test-project",
          "private_key_id": "test-key-id",
          "private_key": "-----BEGIN PRIVATE KEY-----\ntest\n-----END PRIVATE KEY-----\n",
          "client_email": "test@test.iam.gserviceaccount.com",
          "client_id": "test-client-id",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token"
        }
        EOF
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short --cov=src/connector --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_connector
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock
    
    - name: Create test environment
      run: |
        cat > .env << EOF
        CONNECTOR_ENVIRONMENT=testing
        CONNECTOR_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_connector
        CONNECTOR_REDIS_URL=redis://localhost:6379
        EOF
        
        mkdir -p tests/fixtures
        cat > tests/fixtures/mock_credentials.json << EOF
        {
          "type": "service_account",
          "project_id": "test-project",
          "private_key": "-----BEGIN PRIVATE KEY-----\ntest\n-----END PRIVATE KEY-----\n",
          "client_email": "test@test.iam.gserviceaccount.com"
        }
        EOF
    
    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short -m integration
    
    - name: Run quality tests
      run: |
        pytest tests/test_quality.py -v --tb=short

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-connector \
          -e CONNECTOR_ENVIRONMENT=testing \
          -e CONNECTOR_DATABASE_URL=sqlite:///memory: \
          -p 8080:8080 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
        
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        docker stop test-connector || true
    
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/test_integration.py -v -m benchmark --benchmark-json=benchmark.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment (Production)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, integration, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment steps here
        # This could include:
        # - Updating Kubernetes manifests
        # - Triggering deployment pipeline
        # - Updating cloud infrastructure
        
    - name: Health check production deployment
      run: |
        echo "Performing health check on production deployment..."
        # Add health check logic here
        # curl -f https://your-production-url/health

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [lint, test, integration, docker]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.integration.result == 'success' && needs.docker.result == 'success' }}
      run: |
        echo "✅ All CI/CD pipeline jobs completed successfully!"
        # Add notification logic (Slack, email, etc.)
    
    - name: Notify on failure
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.integration.result == 'failure' || needs.docker.result == 'failure' }}
      run: |
        echo "❌ CI/CD pipeline failed!"
        # Add failure notification logic